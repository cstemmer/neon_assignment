import creationForm from '../objects/create_project_page.obj'
import successModal from '../objects/creation_success_modal.obj'
import dashboard from '../objects/dashboard.obj'

describe('Project creation form', () => {
    const defaultUser = Cypress.env('gitHubUser')
    const defaultPostgre = 15
    const defaultRegion = 'aws-us-east-2'
    const defaultMinScaling = 0.25
    const defaultMaxScaling = 0.25
    const defaultDbName = 'neondb'
    const defaultBranchName = 'main'
    const defaultHost = 'us-east-2.aws.neon.tech'
    const customProject = 'myNewProject'
    const customPostgre = 16
    const customDbName = 'customer'
    const customLocation = 'Europe (Frankfurt)'
    const customRegion = 'aws-eu-central-1'
    const customBranchName = 'head'
    const customHost = 'eu-central-1.aws.neon.tech'

    it('validate ui fields and texts', () => {
        cy.visit('/app/projects')
        cy.pause()
        cy.get(creationForm.pageHeading).should('be.visible')
            .and('have.text', 'Create project')
        cy.get(creationForm.form).should('be.visible')
        cy.get(creationForm.projectNameLabel).should('be.visible')
            .and('have.text', 'Project name')
        cy.get(creationForm.projectNameInput).should('be.visible')
            .and('have.attr', 'placeholder', 'e.g., your app name or customer name')
        cy.get(creationForm.postgresVersionLabel).should('be.visible')
            .and('have.text', 'Postgres version')
        cy.get(creationForm.postgresVersionInput).should('be.visible')
            .and('have.text', '15')
        cy.get(creationForm.resourcesText).should('be.visible')
            .and('have.text', 'Resources are organized within a project.')
        cy.get(creationForm.databaseNameLabel).should('be.visible')
            .and('have.text', 'Database name')
        cy.get(creationForm.databaseNameInput).should('be.visible')
            .and('have.attr', 'placeholder', 'neondb')
        cy.get(creationForm.freeTierTermsText).should('be.visible')
            .and('have.text', 'Your Free Tier project is created with a single Read/Write'
      + ' compute that automatically scales to zero after five minutes of inactivity.')
        cy.get(creationForm.freeTierIcon).should('be.visible')
            .and('have.length', 1)
        cy.get(creationForm.regionLabel).should('be.visible')
            .and('have.text', 'Region')
        cy.get(creationForm.regionValue).should('be.visible')
            .and('have.text', 'US East (Ohio)')
        cy.get(creationForm.submitButton).should('be.visible')
            .and('be.enabled')
            .and('have.text', 'Create project')
        cy.get(creationForm.advancedOptions).should('not.be.visible')
        cy.get(creationForm.moreOptionsButton).should('have.text', 'More options')
            .click()
        cy.get(creationForm.advancedOptions).should('be.visible')
        cy.get(creationForm.advanceOptionsHeader).should('be.visible')
            .and('have.text', 'Branch data the same way you branch code')
        cy.get(creationForm.branchingText).should('be.visible')
            .and('have.text', 'Neon supports data branching. The Free Tier permits up'
          + ' to 10 branches, each with its own compute resources. Provide a name for your'
          + ' primary branch or use the default name (main).')
        cy.get(creationForm.branchingTermsText).should('be.visible')
            .and('have.text', 'Data on the primary branch is always accessible. Access'
          + ' to data on non-primary branches is subject to Free Tier compute limits. Read more ')
        cy.get(creationForm.primaryBranchLabel).should('be.visible')
            .and('have.text', 'Primary branch name')
        cy.get(creationForm.primaryBranchInput).should('be.visible')
            .and('have.attr', 'placeholder', 'main')
        cy.get(creationForm.branchingTermsLink).should('be.visible')
            .and('have.text', 'Read more ')
            .and('have.attr', 'href', 'https://neon.tech/docs/introduction/free-tier')
        cy.get(creationForm.branchingTermsIcon).should('be.visible')
            .and('have.length', 2)
        cy.get(creationForm.moreOptionsButton).should('have.text', 'Fewer options')
            .click()
        cy.get(creationForm.submitButton).should('be.visible')
            .and('be.enabled')
            .and('have.text', 'Create project')
        cy.get(creationForm.advancedOptions).should('not.be.visible')
    })

    it('validate user can create project without filling in the form and close modal', () => {
        cy.intercept('POST', '/api/v2/projects').as('projectCreated')
        cy.visit('/app/projects')
        cy.pause()
        cy.get(creationForm.submitButton).should('have.text', 'Create project')
            .click()
        cy.wait('@projectCreated').then((xhr) => {
            expect(xhr.response.statusCode).to.equal(201)
            // request
            expect(xhr.request.body.project.name).to.equal(`${defaultUser}'s project`)
            expect(xhr.request.body.project.pg_version).to.equal(defaultPostgre)
            expect(xhr.request.body.project.region_id).to.equal(defaultRegion)
            expect(xhr.request.body.project.default_endpoint_settings.autoscaling_limit_min_cu)
                .to.equal(defaultMinScaling)
            expect(xhr.request.body.project.default_endpoint_settings.autoscaling_limit_max_cu)
                .to.equal(defaultMaxScaling)
            expect(xhr.request.body.project.branch.database_name).to.equal(defaultDbName)
            expect(xhr.request.body.project.branch.name).to.equal(defaultBranchName)
            // response
            expect(xhr.response.body.project.name).to.equal(`${defaultUser}'s project`)
            expect(xhr.response.body.project.default_endpoint_settings.autoscaling_limit_min_cu)
                .to.equal(defaultMinScaling)
            expect(xhr.response.body.project.default_endpoint_settings.autoscaling_limit_max_cu)
                .to.equal(defaultMaxScaling)
            expect(xhr.response.body.project.pg_version).to.equal(defaultPostgre)
            expect(xhr.response.body.project.proxy_host).to.equal(defaultHost)
            expect(xhr.response.body.connection_uris[0].connection_uri).to.contain(defaultHost)
            expect(xhr.response.body.connection_uris[0].connection_parameters.database)
                .to.equal(defaultDbName)
            expect(xhr.response.body.connection_uris[0].connection_parameters.role)
                .to.equal(defaultUser)
            expect(xhr.response.body.connection_uris[0].connection_parameters.host)
                .to.contain(defaultHost)
            expect(xhr.response.body.connection_uris[0].connection_parameters.pooler_host)
                .to.contain(defaultHost)
            expect(xhr.response.body.roles[0].name).to.equal(defaultUser)
            expect(xhr.response.body.databases[0].name).to.equal(defaultDbName)
            expect(xhr.response.body.databases[0].owner_name).to.equal(defaultUser)
            expect(xhr.response.body.branch.name).to.equal(defaultBranchName)
            expect(xhr.response.body.endpoints[0].host).to.contain(defaultHost)
            expect(xhr.response.body.endpoints[0].autoscaling_limit_min_cu)
                .to.equal(defaultMinScaling)
            expect(xhr.response.body.endpoints[0].autoscaling_limit_max_cu)
                .to.equal(defaultMaxScaling)
            expect(xhr.response.body.endpoints[0].region_id).to.equal(defaultRegion)
        })
        cy.get(successModal.modal).should('be.visible')
        cy.get(successModal.modalHeader).should('be.visible')
            .and('have.text', 'Connection details for your new project')
        cy.get(successModal.successMessage).should('be.visible')
            .and('have.text', `Project ${defaultUser}'s project with database`
          + ` ${defaultDbName} was created successfully.`)
            .and('have.css', 'color', 'rgb(105, 227, 159)')
        cy.get(successModal.successIcon).should('be.visible')
        cy.get(successModal.closeButton).click()
        cy.get(dashboard.projectPath).should('be.visible')
            .and('have.text', `Home/${defaultUser}'s project`)
    })

    it('validate user can fill in the form, create the project and close modal', () => {
        cy.intercept('POST', '/api/v2/projects').as('projectCreated')
        cy.visit('/app/projects')
        cy.pause()
        cy.get(creationForm.projectNameInput).should('be.visible')
            .type(customProject)
        cy.get(creationForm.postgresVersionInput).click()
        cy.contains(customPostgre).click()
        cy.get(creationForm.postgresVersionInput).should('be.visible')
            .and('have.text', customPostgre)
        cy.get(creationForm.databaseNameInput).type(customDbName)
        cy.get(creationForm.regionInput).click()
        cy.contains(customLocation).click()
        cy.get(creationForm.regionValue).should('be.visible')
            .and('have.text', customLocation)
        cy.get(creationForm.moreOptionsButton).click()
        cy.get(creationForm.primaryBranchInput).clear()
        cy.get(creationForm.primaryBranchInput).type(customBranchName)
        cy.get(creationForm.submitButton).should('have.text', 'Create project')
            .click()
        cy.wait('@projectCreated').then((xhr) => {
            expect(xhr.response.statusCode).to.equal(201)
            // request
            expect(xhr.request.body.project.name).to.equal(customProject)
            expect(xhr.request.body.project.pg_version).to.equal(customPostgre)
            expect(xhr.request.body.project.region_id).to.equal(customRegion)
            expect(xhr.request.body.project.default_endpoint_settings.autoscaling_limit_min_cu)
                .to.equal(defaultMinScaling)
            expect(xhr.request.body.project.default_endpoint_settings.autoscaling_limit_max_cu)
                .to.equal(defaultMaxScaling)
            expect(xhr.request.body.project.branch.database_name).to.equal(customDbName)
            expect(xhr.request.body.project.branch.name).to.equal(customBranchName)
            // response
            expect(xhr.response.body.project.name).to.equal(customProject)
            expect(xhr.response.body.project.default_endpoint_settings.autoscaling_limit_min_cu)
                .to.equal(defaultMinScaling)
            expect(xhr.response.body.project.default_endpoint_settings.autoscaling_limit_max_cu)
                .to.equal(defaultMaxScaling)
            expect(xhr.response.body.project.pg_version).to.equal(customPostgre)
            expect(xhr.response.body.project.proxy_host).to.equal(customHost)
            expect(xhr.response.body.connection_uris[0].connection_uri).to.contain(customHost)
            expect(xhr.response.body.connection_uris[0].connection_uri).to.contain(defaultUser)
            expect(xhr.response.body.connection_uris[0].connection_uri).to.contain(customDbName)
            expect(xhr.response.body.connection_uris[0].connection_parameters.database)
                .to.equal(customDbName)
            expect(xhr.response.body.connection_uris[0].connection_parameters.role)
                .to.equal(defaultUser)
            expect(xhr.response.body.connection_uris[0].connection_parameters.host)
                .to.contain(customHost)
            expect(xhr.response.body.connection_uris[0].connection_parameters.pooler_host)
                .to.contain(customHost)
            expect(xhr.response.body.roles[0].name).to.equal(defaultUser)
            expect(xhr.response.body.databases[0].name).to.equal(customDbName)
            expect(xhr.response.body.databases[0].owner_name).to.equal(defaultUser)
            expect(xhr.response.body.branch.name).to.equal(customBranchName)
            expect(xhr.response.body.endpoints[0].host).to.contain(customHost)
            expect(xhr.response.body.endpoints[0].autoscaling_limit_min_cu)
                .to.equal(defaultMinScaling)
            expect(xhr.response.body.endpoints[0].autoscaling_limit_max_cu)
                .to.equal(defaultMaxScaling)
            expect(xhr.response.body.endpoints[0].region_id).to.equal(customRegion)
        })
        cy.get(successModal.modal).should('be.visible')
        cy.get(successModal.modalHeader).should('be.visible')
            .and('have.text', 'Connection details for your new project')
        cy.get(successModal.successMessage).should('be.visible')
            .and('have.text', `Project ${customProject} with database`
        + ` ${customDbName} was created successfully.`)
            .and('have.css', 'color', 'rgb(105, 227, 159)')
        cy.get(successModal.successIcon).should('be.visible')
        cy.get(successModal.closeButton).click()
        cy.get(dashboard.projectPath).should('be.visible')
            .and('have.text', `Home/${customProject}`)
    })
})
